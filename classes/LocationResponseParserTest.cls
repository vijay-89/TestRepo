//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//Lifted and Shifted from COM1 - XMen

@IsTest
public class LocationResponseParserTest {
  
  // This test method should give 100% coverage
  static testMethod void testParse() {
    String json = '{'+
    '   \"authenticationResultCode\":\"ValidCredentials\",'+
    '   \"brandLogoUri\":\"http:\\/\\/dev.virtualearth.net\\/Branding\\/logo_powered_by.png\",'+
    '   \"copyright\":\"Copyright Â© 2011 Microsoft and its suppliers. All rights reserved. This API cannot be accessed and the content and any results may not be used, reproduced or transmitted in any manner without express written permission from Microsoft Corporation.\",'+
    '   \"resourceSets\":['+
    '      {'+
    '         \"estimatedTotal\":1,'+
    '         \"resources\":['+
    '            {'+
    '               \"__type\":\"Location:http:\\/\\/schemas.microsoft.com\\/search\\/local\\/ws\\/rest\\/v1\",'+
    '               \"bbox\":['+
    '                  47.636257744012461,'+
    '                  -122.13735364288299,'+
    '                  47.643983179153814,'+
    '                  -122.12206713944467'+
    '               ],'+
    '               \"name\":\"1 Microsoft Way, Redmond, WA 98052\",'+
    '               \"point\":{'+
    '                  \"type\":\"Point\",'+
    '                  \"coordinates\":['+
    '                     47.640120461583138,'+
    '                     -122.12971039116383'+
    '                  ]'+
    '               },'+
    '               \"address\":{'+
    '                  \"addressLine\":\"1 Microsoft Way\",'+
    '                  \"adminDistrict\":\"WA\",'+
    '                  \"adminDistrict2\":\"King Co.\",'+
    '                  \"countryRegion\":\"United States\",'+
    '                  \"formattedAddress\":\"1 Microsoft Way, Redmond, WA 98052\",'+
    '                  \"locality\":\"Redmond\",'+
    '                  \"postalCode\":\"98052\"'+
    '               },'+
    '               \"confidence\":\"High\",'+
    '               \"entityType\":\"Address\",'+
    '               \"geocodePoints\":['+
    '                  {'+
    '                     \"type\":\"Point\",'+
    '                     \"coordinates\":['+
    '                        47.640120461583138,'+
    '                        -122.12971039116383'+
    '                     ],'+
    '                     \"calculationMethod\":\"InterpolationOffset\",'+
    '                     \"usageTypes\":['+
    '                        \"Display\"'+
    '                     ]'+
    '                  },'+
    '                  {'+
    '                     \"type\":\"Point\",'+
    '                     \"coordinates\":['+
    '                        47.640144601464272,'+
    '                        -122.12976671755314'+
    '                     ],'+
    '                     \"calculationMethod\":\"Interpolation\",'+
    '                     \"usageTypes\":['+
    '                        \"Route\"'+
    '                     ]'+
    '                  }'+
    '               ],'+
    '               \"matchCodes\":['+
    '                  \"Good\"'+
    '               ]'+
    '            }'+
    '         ]'+
    '      }'+
    '   ],'+
    '   \"statusCode\":200,'+
    '   \"statusDescription\":\"OK\",'+
    '   \"traceId\":\"b0b1286504404eafa7e7dad3e749d570\"'+
    '}';
    LocationResponseParser r = LocationResponseParser.parse(json);
    System.assert(r != null);

    json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
    LocationResponseParser.Address objAddress = new LocationResponseParser.Address(System.JSON.createParser(json));
    System.assert(objAddress != null);
    System.assert(objAddress.addressLine == null);
    System.assert(objAddress.adminDistrict == null);
    System.assert(objAddress.adminDistrict2 == null);
    System.assert(objAddress.countryRegion == null);
    System.assert(objAddress.formattedAddress == null);
    System.assert(objAddress.locality == null);
    System.assert(objAddress.postalCode == null);

    json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
    LocationResponseParser.GeocodePoint objGeocodePoints = new LocationResponseParser.GeocodePoint(System.JSON.createParser(json));
    System.assert(objGeocodePoints != null);
    System.assert(objGeocodePoints.type_Z == null);
    System.assert(objGeocodePoints.coordinates == null);
    System.assert(objGeocodePoints.calculationMethod == null);
    System.assert(objGeocodePoints.usageTypes == null);

    json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
    LocationResponseParser objLocationResponseParser = new LocationResponseParser(System.JSON.createParser(json));
    System.assert(objLocationResponseParser != null);
    System.assert(objLocationResponseParser.authenticationResultCode == null);
    System.assert(objLocationResponseParser.brandLogoUri == null);
    System.assert(objLocationResponseParser.copyright == null);
    System.assert(objLocationResponseParser.resourceSets == null);
    System.assert(objLocationResponseParser.statusCode == null);
    System.assert(objLocationResponseParser.statusDescription == null);
    System.assert(objLocationResponseParser.traceId == null);

    json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
    LocationResponseParser.Point objPoint = new LocationResponseParser.Point(System.JSON.createParser(json));
    System.assert(objPoint != null);
    System.assert(objPoint.type_Z == null);
    System.assert(objPoint.coordinates == null);

    json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
    LocationResponseParser.Resource objResources = new LocationResponseParser.Resource(System.JSON.createParser(json));
    System.assert(objResources != null);
    System.assert(objResources.type_x == null);
    System.assert(objResources.bbox == null);
    System.assert(objResources.name == null);
    System.assert(objResources.point == null);
    System.assert(objResources.address == null);
    System.assert(objResources.confidence == null);
    System.assert(objResources.entityType == null);
    System.assert(objResources.geocodePoints == null);
    System.assert(objResources.matchCodes == null);

    json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
    LocationResponseParser.ResourceSet objResourceSets = new LocationResponseParser.ResourceSet(System.JSON.createParser(json));
    System.assert(objResourceSets != null);
    System.assert(objResourceSets.estimatedTotal == null);
    System.assert(objResourceSets.resources == null);
  }
}